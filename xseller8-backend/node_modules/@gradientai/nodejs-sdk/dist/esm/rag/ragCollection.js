"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RagCollection = void 0;
const path_1 = require("path");
class RagCollection {
    constructor(params) {
        this.addFiles = ({ filepaths, }) => __awaiter(this, void 0, void 0, function* () {
            const { files } = yield this.filesApiManager.uploadFiles({
                filepaths,
                type: "ragUserFile",
            });
            yield this.ragApi.addFilesToRagCollection({
                addFilesToRagCollectionBodyParams: {
                    files: files.map(({ filepath, id }) => ({
                        id,
                        name: (0, path_1.basename)(filepath),
                    })),
                },
                id: this.id,
                xGradientWorkspaceId: this.workspaceId,
            });
            const { data: { files: updatedFiles }, } = yield this.ragApi.getRagCollection({
                xGradientWorkspaceId: this.workspaceId,
                id: this.id,
            });
            this.files = updatedFiles;
        });
        this.delete = ({}) => __awaiter(this, void 0, void 0, function* () {
            yield this.ragApi.deleteRagCollection({
                id: this.id,
                xGradientWorkspaceId: this.workspaceId,
            });
        });
        this.files = params.files;
        this.filesApiManager = params.filesApiManager;
        this.id = params.id;
        this.name = params.name;
        this.chunker = params.chunker;
        this.ragApi = params.ragApi;
        this.workspaceId = params.workspaceId;
    }
}
exports.RagCollection = RagCollection;
