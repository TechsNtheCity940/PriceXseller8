"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseModel = void 0;
const abstractModel_1 = require("./abstractModel");
const modelAdapter_1 = require("./modelAdapter");
class BaseModel extends abstractModel_1.Model {
    constructor({ apiInstance, capabilities, id, slug, workspaceId, }) {
        super({ apiInstance, id, workspaceId });
        this.createModelAdapter = ({ learningRate, name, rank, }) => __awaiter(this, void 0, void 0, function* () {
            // TODO(adrian@gradient.ai, 01/10/2024): does it make sense to prevent this if the model is incapable?
            const { data: { id }, } = yield this.apiInstance.createModel({
                createModelBodyParams: {
                    initialHyperparameters: {
                        loraHyperparameters: { rank },
                        trainingArguments: { learningRate },
                    },
                    model: { baseModelId: this.id, name },
                },
                xGradientWorkspaceId: this.workspaceId,
            });
            return new modelAdapter_1.ModelAdapter({
                apiInstance: this.apiInstance,
                id,
                baseModelId: this.id,
                name,
                workspaceId: this.workspaceId,
            });
        });
        this.slug = slug;
        this.capabilities = capabilities;
    }
}
exports.BaseModel = BaseModel;
