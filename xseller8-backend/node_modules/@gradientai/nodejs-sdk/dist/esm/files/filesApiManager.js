"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesApiManager = void 0;
const fs_1 = require("fs");
class FilesApiManager {
    constructor(params) {
        this.uploadFile = ({ filepath, type, }) => __awaiter(this, void 0, void 0, function* () {
            const { data: { id }, } = yield this.filesApi.uploadFile({
                xGradientWorkspaceId: this.workspaceId,
                file: {
                    contentStream: (0, fs_1.createReadStream)(filepath),
                    fileSize: (0, fs_1.statSync)(filepath).size,
                    type: "file",
                },
                type,
            });
            return { id };
        });
        this.uploadFiles = ({ filepaths, type, }) => __awaiter(this, void 0, void 0, function* () {
            const fileUploadResults = yield Promise.all(filepaths.map((filepath) => __awaiter(this, void 0, void 0, function* () {
                return yield this.uploadFile({
                    filepath,
                    type,
                });
            })));
            const files = filepaths.map((filepath, index) => {
                const fileUploadResult = fileUploadResults[index];
                return {
                    id: fileUploadResult.id,
                    filepath,
                };
            });
            return { files };
        });
        this.filesApi = params.filesApi;
        this.workspaceId = params.workspaceId;
    }
}
exports.FilesApiManager = FilesApiManager;
