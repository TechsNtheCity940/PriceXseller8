import { GenerateEmbeddingSlugEnum } from "./api";
import { EmbeddingsModel } from "./embedding/embeddingsModel";
import { Model } from "./model/abstractModel";
import { BaseModel } from "./model/baseModel";
import { ModelAdapter } from "./model/modelAdapter";
import { RagCollection } from "./rag/ragCollection";
import { AnalyzeSentimentParams, AnswerParams, AnswerResult, CapabilityFilterOption, CreateRagCollectionParams, ExtractParams, ExtractPdfParams, ExtractPdfResult, ExtractResult, GetRagCollectionParams, PersonalizeParams, Sentiment, SummarizeParams, TranscribeAudioParams, TranscribeAudioResult } from "./types";
export declare class Gradient {
    private readonly blocksApi;
    private readonly embeddingsApi;
    private readonly filesApiManager;
    private readonly modelsApi;
    private readonly ragApi;
    readonly workspaceId: string;
    private readonly deserializeModelInstance;
    private readonly deserializeEmbeddingsModel;
    constructor({ accessToken, host, workspaceId, }: {
        accessToken?: string;
        host?: string;
        workspaceId?: string;
    });
    readonly getBaseModel: ({ baseModelSlug, }: {
        baseModelSlug: string;
    }) => Promise<BaseModel>;
    readonly getModelAdapter: ({ modelAdapterId, }: {
        modelAdapterId: string;
    }) => Promise<ModelAdapter>;
    readonly listModels: <T extends boolean>({ capability, onlyBase, }: {
        capability?: CapabilityFilterOption;
        onlyBase: T;
    }) => Promise<(T extends true ? BaseModel : Model)[]>;
    readonly getEmbeddingsModel: ({ slug, }: {
        slug: GenerateEmbeddingSlugEnum;
    }) => Promise<EmbeddingsModel>;
    readonly listEmbeddingsModels: ({}: {}) => Promise<Array<EmbeddingsModel>>;
    readonly analyzeSentiment: ({ document, examples, }: AnalyzeSentimentParams) => Promise<{
        sentiment: Sentiment;
    }>;
    readonly extract: ({ document, schema, }: ExtractParams) => Promise<ExtractResult>;
    readonly extractPdf: ({ filepath, }: ExtractPdfParams) => Promise<ExtractPdfResult>;
    readonly transcribeAudio: ({ filepath, }: TranscribeAudioParams) => Promise<TranscribeAudioResult>;
    readonly answer: ({ question, source, }: AnswerParams) => Promise<AnswerResult>;
    readonly personalize: ({ document, audienceDescription, }: PersonalizeParams) => Promise<{
        personalizedDocument: string;
    }>;
    readonly summarize: ({ document, examples, length, }: SummarizeParams) => Promise<{
        summary: string;
    }>;
    readonly getRagCollection: ({ id, }: GetRagCollectionParams) => Promise<RagCollection>;
    /**
     *  Files are not present in the list call. To retrieve the files use `getRagCollection`.
     */
    readonly listRagCollections: ({}: {}) => Promise<Array<Omit<RagCollection, "files">>>;
    readonly createRagCollection: ({ chunker, filepaths, name, slug, }: CreateRagCollectionParams) => Promise<RagCollection>;
}
//# sourceMappingURL=index.d.ts.map