"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Gradient AI API
 * Interface for interacting with Gradient AI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gradient.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddingsApi = exports.EmbeddingsApiFactory = exports.EmbeddingsApiFp = exports.EmbeddingsApiAxiosParamCreator = exports.BlocksApi = exports.BlocksApiFactory = exports.BlocksApiFp = exports.BlocksApiAxiosParamCreator = exports.SummarizeDocumentBodyParamsLengthEnum = exports.SentenceWithContextChunkerChunkerTypeEnum = exports.NormalChunkerChunkerTypeEnum = exports.ModelAdapterTypeEnum = exports.MeaningBasedChunkerChunkerTypeEnum = exports.ListRagCollectionsSuccessRagCollectionsInnerChunkerOneOf3ChunkerTypeEnum = exports.ListRagCollectionsSuccessRagCollectionsInnerChunkerOneOf2ChunkerTypeEnum = exports.ListRagCollectionsSuccessRagCollectionsInnerChunkerOneOf1ChunkerTypeEnum = exports.ListRagCollectionsSuccessRagCollectionsInnerChunkerOneOfChunkerTypeEnum = exports.ListRagCollectionsSuccessRagCollectionsInnerSlugEnum = exports.ListEmbeddingsSuccessEmbeddingsModelsInnerSlugEnum = exports.GetRagCollectionSuccessFilesInnerStatusEnum = exports.GetRagCollectionSuccessSlugEnum = exports.GetModelSuccessTypeEnum = exports.GetAudioTranscriptionSuccessOneOf1StatusEnum = exports.GetAudioTranscriptionSuccessOneOfStatusEnum = exports.GenerateAnswerBodyParamsSourceOneOf1TypeEnum = exports.GenerateAnswerBodyParamsSourceOneOfTypeEnum = exports.FineTuneModelErrorOneOf1TypeEnum = exports.FineTuneModelErrorOneOfTypeEnum = exports.FileChunkerChunkerTypeEnum = exports.ExtractPdfSuccessPagesInnerTextBlocksInnerKindEnum = exports.ExtractPdfSuccessPagesInnerTablesInnerTableRowsInnerTypeEnum = exports.ExtractPdfSuccessPagesInnerImagesInnerFormatEnum = exports.ExtractEntityBodyParamsSchemaValueTypeEnum = exports.CreateRagCollectionBodyParamsSlugEnum = exports.CompleteModelErrorOneOf9TypeEnum = exports.CompleteModelErrorOneOf8TypeEnum = exports.CompleteModelErrorOneOf7TypeEnum = exports.CompleteModelErrorOneOf6TypeEnum = exports.CompleteModelErrorOneOf5TypeEnum = exports.CompleteModelErrorOneOf4TypeEnum = exports.CompleteModelErrorOneOf3TypeEnum = exports.CompleteModelErrorOneOf2TypeEnum = exports.CompleteModelErrorOneOf10TypeEnum = exports.CompleteModelErrorOneOf1TypeEnum = exports.CompleteModelErrorOneOfTypeEnum = exports.CompleteModelBodyParamsGuidanceTypeEnum = exports.BaseModelTypeEnum = exports.BaseModelCapabilitiesEnum = exports.AnalyzeSentimentSuccessSentimentEnum = exports.AnalyzeSentimentBodyParamsExamplesInnerSentimentEnum = void 0;
exports.RAGApi = exports.RAGApiFactory = exports.RAGApiFp = exports.RAGApiAxiosParamCreator = exports.ListModelsCapabilityEnum = exports.ModelsApi = exports.ModelsApiFactory = exports.ModelsApiFp = exports.ModelsApiAxiosParamCreator = exports.UploadFileTypeEnum = exports.FilesApi = exports.FilesApiFactory = exports.FilesApiFp = exports.FilesApiAxiosParamCreator = exports.GenerateEmbeddingSlugEnum = void 0;
const axios_1 = require("axios");
// URLSearchParams not necessarily used
// @ts-ignore
const url_1 = require("url");
const FormData = require("form-data");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.AnalyzeSentimentBodyParamsExamplesInnerSentimentEnum = {
    Negative: 'negative',
    Neutral: 'neutral',
    Positive: 'positive'
};
exports.AnalyzeSentimentSuccessSentimentEnum = {
    Negative: 'negative',
    Neutral: 'neutral',
    Positive: 'positive'
};
exports.BaseModelCapabilitiesEnum = {
    Complete: 'complete',
    FineTune: 'fineTune'
};
exports.BaseModelTypeEnum = {
    BaseModel: 'baseModel'
};
exports.CompleteModelBodyParamsGuidanceTypeEnum = {
    Choice: 'choice'
};
exports.CompleteModelErrorOneOfTypeEnum = {
    FlaggedContent: 'flaggedContent',
    BodyParsingError: 'bodyParsingError',
    QueryOrPathParsingError: 'queryOrPathParsingError',
    Failed: 'failed',
    ModelDoesNotSupportGuidance: 'modelDoesNotSupportGuidance',
    NoRagDocumentsFound: 'noRagDocumentsFound',
    RagRequiresAutoTemplating: 'ragRequiresAutoTemplating',
    UnknownBaseModel: 'unknownBaseModel',
    UnknownModelAdapter: 'unknownModelAdapter',
    UnknownRagCollection: 'unknownRagCollection',
    UnprocessableContent: 'unprocessableContent'
};
exports.CompleteModelErrorOneOf1TypeEnum = {
    BodyParsingError: 'bodyParsingError',
    FlaggedContent: 'flaggedContent',
    QueryOrPathParsingError: 'queryOrPathParsingError',
    Failed: 'failed',
    ModelDoesNotSupportGuidance: 'modelDoesNotSupportGuidance',
    NoRagDocumentsFound: 'noRagDocumentsFound',
    RagRequiresAutoTemplating: 'ragRequiresAutoTemplating',
    UnknownBaseModel: 'unknownBaseModel',
    UnknownModelAdapter: 'unknownModelAdapter',
    UnknownRagCollection: 'unknownRagCollection',
    UnprocessableContent: 'unprocessableContent',
    ModelIncapableOfFineTuning: 'modelIncapableOfFineTuning',
    NanLoss: 'nanLoss'
};
exports.CompleteModelErrorOneOf10TypeEnum = {
    UnprocessableContent: 'unprocessableContent'
};
exports.CompleteModelErrorOneOf2TypeEnum = {
    QueryOrPathParsingError: 'queryOrPathParsingError'
};
exports.CompleteModelErrorOneOf3TypeEnum = {
    Failed: 'failed'
};
exports.CompleteModelErrorOneOf4TypeEnum = {
    ModelDoesNotSupportGuidance: 'modelDoesNotSupportGuidance'
};
exports.CompleteModelErrorOneOf5TypeEnum = {
    NoRagDocumentsFound: 'noRagDocumentsFound'
};
exports.CompleteModelErrorOneOf6TypeEnum = {
    RagRequiresAutoTemplating: 'ragRequiresAutoTemplating'
};
exports.CompleteModelErrorOneOf7TypeEnum = {
    UnknownBaseModel: 'unknownBaseModel'
};
exports.CompleteModelErrorOneOf8TypeEnum = {
    UnknownModelAdapter: 'unknownModelAdapter'
};
exports.CompleteModelErrorOneOf9TypeEnum = {
    UnknownRagCollection: 'unknownRagCollection'
};
exports.CreateRagCollectionBodyParamsSlugEnum = {
    BgeLarge: 'bge-large'
};
exports.ExtractEntityBodyParamsSchemaValueTypeEnum = {
    Boolean: 'boolean',
    Number: 'number',
    String: 'string'
};
exports.ExtractPdfSuccessPagesInnerImagesInnerFormatEnum = {
    Base64Png: 'base64-png'
};
exports.ExtractPdfSuccessPagesInnerTablesInnerTableRowsInnerTypeEnum = {
    DataRow: 'table_data_row',
    Header: 'table_header'
};
exports.ExtractPdfSuccessPagesInnerTextBlocksInnerKindEnum = {
    Footer: 'footer',
    Header: 'header',
    SectionTitle: 'section_title',
    Text: 'text',
    Title: 'title'
};
exports.FileChunkerChunkerTypeEnum = {
    FileChunker: 'fileChunker'
};
exports.FineTuneModelErrorOneOfTypeEnum = {
    ModelIncapableOfFineTuning: 'modelIncapableOfFineTuning'
};
exports.FineTuneModelErrorOneOf1TypeEnum = {
    NanLoss: 'nanLoss'
};
exports.GenerateAnswerBodyParamsSourceOneOfTypeEnum = {
    Rag: 'rag'
};
exports.GenerateAnswerBodyParamsSourceOneOf1TypeEnum = {
    Document: 'document'
};
exports.GetAudioTranscriptionSuccessOneOfStatusEnum = {
    Cancelled: 'cancelled',
    Failed: 'failed',
    Pending: 'pending',
    PendingCancellation: 'pendingCancellation',
    Running: 'running'
};
exports.GetAudioTranscriptionSuccessOneOf1StatusEnum = {
    Succeeded: 'succeeded'
};
exports.GetModelSuccessTypeEnum = {
    ModelAdapter: 'modelAdapter'
};
exports.GetRagCollectionSuccessSlugEnum = {
    BgeLarge: 'bge-large'
};
exports.GetRagCollectionSuccessFilesInnerStatusEnum = {
    Cancelled: 'cancelled',
    Failed: 'failed',
    Succeeded: 'succeeded',
    Pending: 'pending',
    PendingCancellation: 'pendingCancellation',
    Running: 'running'
};
exports.ListEmbeddingsSuccessEmbeddingsModelsInnerSlugEnum = {
    BgeLarge: 'bge-large'
};
exports.ListRagCollectionsSuccessRagCollectionsInnerSlugEnum = {
    BgeLarge: 'bge-large'
};
exports.ListRagCollectionsSuccessRagCollectionsInnerChunkerOneOfChunkerTypeEnum = {
    FileChunker: 'fileChunker'
};
exports.ListRagCollectionsSuccessRagCollectionsInnerChunkerOneOf1ChunkerTypeEnum = {
    SentenceWithContextChunker: 'sentenceWithContextChunker'
};
exports.ListRagCollectionsSuccessRagCollectionsInnerChunkerOneOf2ChunkerTypeEnum = {
    MeaningBasedChunker: 'meaningBasedChunker'
};
exports.ListRagCollectionsSuccessRagCollectionsInnerChunkerOneOf3ChunkerTypeEnum = {
    NormalChunker: 'normalChunker'
};
exports.MeaningBasedChunkerChunkerTypeEnum = {
    MeaningBasedChunker: 'meaningBasedChunker'
};
exports.ModelAdapterTypeEnum = {
    ModelAdapter: 'modelAdapter'
};
exports.NormalChunkerChunkerTypeEnum = {
    NormalChunker: 'normalChunker'
};
exports.SentenceWithContextChunkerChunkerTypeEnum = {
    SentenceWithContextChunker: 'sentenceWithContextChunker'
};
exports.SummarizeDocumentBodyParamsLengthEnum = {
    Short: 'short',
    Medium: 'medium',
    Long: 'long'
};
/**
 * BlocksApi - axios parameter creator
 * @export
 */
const BlocksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Analyzes text to determine the emotional tone of the message.
         * @summary Sentiment analysis
         * @param {string} xGradientWorkspaceId
         * @param {AnalyzeSentimentBodyParams} analyzeSentimentBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeSentiment: (xGradientWorkspaceId, analyzeSentimentBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('analyzeSentiment', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'analyzeSentimentBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('analyzeSentiment', 'analyzeSentimentBodyParams', analyzeSentimentBodyParams);
            const localVarPath = `/blocks/analyze-sentiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(analyzeSentimentBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates an audio transcription job.
         * @summary Create audio transcription
         * @param {string} xGradientWorkspaceId
         * @param {CreateAudioTranscriptionBodyParams} createAudioTranscriptionBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAudioTranscription: (xGradientWorkspaceId, createAudioTranscriptionBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('createAudioTranscription', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'createAudioTranscriptionBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('createAudioTranscription', 'createAudioTranscriptionBodyParams', createAudioTranscriptionBodyParams);
            const localVarPath = `/blocks/transcription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAudioTranscriptionBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Extracts an entity from the document with the specified fields and types.
         * @summary Entity extraction
         * @param {string} xGradientWorkspaceId
         * @param {ExtractEntityBodyParams} extractEntityBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractEntity: (xGradientWorkspaceId, extractEntityBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('extractEntity', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'extractEntityBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('extractEntity', 'extractEntityBodyParams', extractEntityBodyParams);
            const localVarPath = `/blocks/extract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(extractEntityBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Extracts content from the PDF.
         * @summary PDF extraction
         * @param {string} xGradientWorkspaceId
         * @param {File} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractPdf: (xGradientWorkspaceId, file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('extractPdf', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'file' is not null or undefined
            (0, common_1.assertParamExists)('extractPdf', 'file', file);
            const localVarPath = `/blocks/extract-pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            if (file !== undefined) {
                if (typeof file === 'object' && file.type === 'file') {
                    localVarFormParams.append('file', file.contentStream, { knownLength: file.fileSize });
                }
                else {
                    localVarFormParams.append('file', file);
                }
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), (_b = (_a = localVarFormParams).getHeaders) === null || _b === void 0 ? void 0 : _b.call(_a)), (localVarFormParams.hasKnownLength() ? { 'Content-Length': localVarFormParams.getLengthSync() } : {})), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Answers questions using the provided context.
         * @summary Document question & answer
         * @param {string} xGradientWorkspaceId
         * @param {GenerateAnswerBodyParams} generateAnswerBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAnswer: (xGradientWorkspaceId, generateAnswerBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('generateAnswer', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'generateAnswerBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('generateAnswer', 'generateAnswerBodyParams', generateAnswerBodyParams);
            const localVarPath = `/blocks/answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateAnswerBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the result of the audio transcription job.
         * @summary Get audio transcription
         * @param {string} transcriptionId
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioTranscription: (transcriptionId, xGradientWorkspaceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'transcriptionId' is not null or undefined
            (0, common_1.assertParamExists)('getAudioTranscription', 'transcriptionId', transcriptionId);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('getAudioTranscription', 'xGradientWorkspaceId', xGradientWorkspaceId);
            const localVarPath = `/blocks/transcription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (transcriptionId !== undefined) {
                localVarQueryParameter['transcriptionId'] = transcriptionId;
            }
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Personalizes the document in a tone and style specific to the described target audience.
         * @summary Document personalization
         * @param {string} xGradientWorkspaceId
         * @param {PersonalizeDocumentBodyParams} personalizeDocumentBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalizeDocument: (xGradientWorkspaceId, personalizeDocumentBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('personalizeDocument', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'personalizeDocumentBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('personalizeDocument', 'personalizeDocumentBodyParams', personalizeDocumentBodyParams);
            const localVarPath = `/blocks/personalize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(personalizeDocumentBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Generates a summary of the document using the provided guidance.
         * @summary Document summary
         * @param {string} xGradientWorkspaceId
         * @param {SummarizeDocumentBodyParams} summarizeDocumentBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summarizeDocument: (xGradientWorkspaceId, summarizeDocumentBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('summarizeDocument', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'summarizeDocumentBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('summarizeDocument', 'summarizeDocumentBodyParams', summarizeDocumentBodyParams);
            const localVarPath = `/blocks/summarize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(summarizeDocumentBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.BlocksApiAxiosParamCreator = BlocksApiAxiosParamCreator;
/**
 * BlocksApi - functional programming interface
 * @export
 */
const BlocksApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BlocksApiAxiosParamCreator)(configuration);
    return {
        /**
         * Analyzes text to determine the emotional tone of the message.
         * @summary Sentiment analysis
         * @param {string} xGradientWorkspaceId
         * @param {AnalyzeSentimentBodyParams} analyzeSentimentBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeSentiment(xGradientWorkspaceId, analyzeSentimentBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyzeSentiment(xGradientWorkspaceId, analyzeSentimentBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates an audio transcription job.
         * @summary Create audio transcription
         * @param {string} xGradientWorkspaceId
         * @param {CreateAudioTranscriptionBodyParams} createAudioTranscriptionBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAudioTranscription(xGradientWorkspaceId, createAudioTranscriptionBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAudioTranscription(xGradientWorkspaceId, createAudioTranscriptionBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Extracts an entity from the document with the specified fields and types.
         * @summary Entity extraction
         * @param {string} xGradientWorkspaceId
         * @param {ExtractEntityBodyParams} extractEntityBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractEntity(xGradientWorkspaceId, extractEntityBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.extractEntity(xGradientWorkspaceId, extractEntityBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Extracts content from the PDF.
         * @summary PDF extraction
         * @param {string} xGradientWorkspaceId
         * @param {File} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractPdf(xGradientWorkspaceId, file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.extractPdf(xGradientWorkspaceId, file, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Answers questions using the provided context.
         * @summary Document question & answer
         * @param {string} xGradientWorkspaceId
         * @param {GenerateAnswerBodyParams} generateAnswerBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAnswer(xGradientWorkspaceId, generateAnswerBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.generateAnswer(xGradientWorkspaceId, generateAnswerBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets the result of the audio transcription job.
         * @summary Get audio transcription
         * @param {string} transcriptionId
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioTranscription(transcriptionId, xGradientWorkspaceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAudioTranscription(transcriptionId, xGradientWorkspaceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Personalizes the document in a tone and style specific to the described target audience.
         * @summary Document personalization
         * @param {string} xGradientWorkspaceId
         * @param {PersonalizeDocumentBodyParams} personalizeDocumentBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalizeDocument(xGradientWorkspaceId, personalizeDocumentBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.personalizeDocument(xGradientWorkspaceId, personalizeDocumentBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Generates a summary of the document using the provided guidance.
         * @summary Document summary
         * @param {string} xGradientWorkspaceId
         * @param {SummarizeDocumentBodyParams} summarizeDocumentBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summarizeDocument(xGradientWorkspaceId, summarizeDocumentBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.summarizeDocument(xGradientWorkspaceId, summarizeDocumentBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.BlocksApiFp = BlocksApiFp;
/**
 * BlocksApi - factory interface
 * @export
 */
const BlocksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BlocksApiFp)(configuration);
    return {
        /**
         * Analyzes text to determine the emotional tone of the message.
         * @summary Sentiment analysis
         * @param {BlocksApiAnalyzeSentimentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeSentiment(requestParameters, options) {
            return localVarFp.analyzeSentiment(requestParameters.xGradientWorkspaceId, requestParameters.analyzeSentimentBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an audio transcription job.
         * @summary Create audio transcription
         * @param {BlocksApiCreateAudioTranscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAudioTranscription(requestParameters, options) {
            return localVarFp.createAudioTranscription(requestParameters.xGradientWorkspaceId, requestParameters.createAudioTranscriptionBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Extracts an entity from the document with the specified fields and types.
         * @summary Entity extraction
         * @param {BlocksApiExtractEntityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractEntity(requestParameters, options) {
            return localVarFp.extractEntity(requestParameters.xGradientWorkspaceId, requestParameters.extractEntityBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Extracts content from the PDF.
         * @summary PDF extraction
         * @param {BlocksApiExtractPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractPdf(requestParameters, options) {
            return localVarFp.extractPdf(requestParameters.xGradientWorkspaceId, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * Answers questions using the provided context.
         * @summary Document question & answer
         * @param {BlocksApiGenerateAnswerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAnswer(requestParameters, options) {
            return localVarFp.generateAnswer(requestParameters.xGradientWorkspaceId, requestParameters.generateAnswerBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the result of the audio transcription job.
         * @summary Get audio transcription
         * @param {BlocksApiGetAudioTranscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioTranscription(requestParameters, options) {
            return localVarFp.getAudioTranscription(requestParameters.transcriptionId, requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Personalizes the document in a tone and style specific to the described target audience.
         * @summary Document personalization
         * @param {BlocksApiPersonalizeDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personalizeDocument(requestParameters, options) {
            return localVarFp.personalizeDocument(requestParameters.xGradientWorkspaceId, requestParameters.personalizeDocumentBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a summary of the document using the provided guidance.
         * @summary Document summary
         * @param {BlocksApiSummarizeDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summarizeDocument(requestParameters, options) {
            return localVarFp.summarizeDocument(requestParameters.xGradientWorkspaceId, requestParameters.summarizeDocumentBodyParams, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BlocksApiFactory = BlocksApiFactory;
/**
 * BlocksApi - object-oriented interface
 * @export
 * @class BlocksApi
 * @extends {BaseAPI}
 */
class BlocksApi extends base_1.BaseAPI {
    /**
     * Analyzes text to determine the emotional tone of the message.
     * @summary Sentiment analysis
     * @param {BlocksApiAnalyzeSentimentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    analyzeSentiment(requestParameters, options) {
        return (0, exports.BlocksApiFp)(this.configuration).analyzeSentiment(requestParameters.xGradientWorkspaceId, requestParameters.analyzeSentimentBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates an audio transcription job.
     * @summary Create audio transcription
     * @param {BlocksApiCreateAudioTranscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    createAudioTranscription(requestParameters, options) {
        return (0, exports.BlocksApiFp)(this.configuration).createAudioTranscription(requestParameters.xGradientWorkspaceId, requestParameters.createAudioTranscriptionBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Extracts an entity from the document with the specified fields and types.
     * @summary Entity extraction
     * @param {BlocksApiExtractEntityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    extractEntity(requestParameters, options) {
        return (0, exports.BlocksApiFp)(this.configuration).extractEntity(requestParameters.xGradientWorkspaceId, requestParameters.extractEntityBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Extracts content from the PDF.
     * @summary PDF extraction
     * @param {BlocksApiExtractPdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    extractPdf(requestParameters, options) {
        return (0, exports.BlocksApiFp)(this.configuration).extractPdf(requestParameters.xGradientWorkspaceId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Answers questions using the provided context.
     * @summary Document question & answer
     * @param {BlocksApiGenerateAnswerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    generateAnswer(requestParameters, options) {
        return (0, exports.BlocksApiFp)(this.configuration).generateAnswer(requestParameters.xGradientWorkspaceId, requestParameters.generateAnswerBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the result of the audio transcription job.
     * @summary Get audio transcription
     * @param {BlocksApiGetAudioTranscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    getAudioTranscription(requestParameters, options) {
        return (0, exports.BlocksApiFp)(this.configuration).getAudioTranscription(requestParameters.transcriptionId, requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Personalizes the document in a tone and style specific to the described target audience.
     * @summary Document personalization
     * @param {BlocksApiPersonalizeDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    personalizeDocument(requestParameters, options) {
        return (0, exports.BlocksApiFp)(this.configuration).personalizeDocument(requestParameters.xGradientWorkspaceId, requestParameters.personalizeDocumentBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Generates a summary of the document using the provided guidance.
     * @summary Document summary
     * @param {BlocksApiSummarizeDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlocksApi
     */
    summarizeDocument(requestParameters, options) {
        return (0, exports.BlocksApiFp)(this.configuration).summarizeDocument(requestParameters.xGradientWorkspaceId, requestParameters.summarizeDocumentBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BlocksApi = BlocksApi;
/**
 * EmbeddingsApi - axios parameter creator
 * @export
 */
const EmbeddingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Generates normalized embeddings with the given embeddings model.
         * @summary Generate embeddings
         * @param {GenerateEmbeddingSlugEnum} slug
         * @param {string} xGradientWorkspaceId
         * @param {GenerateEmbeddingBodyParams} generateEmbeddingBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateEmbedding: (slug, xGradientWorkspaceId, generateEmbeddingBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('generateEmbedding', 'slug', slug);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('generateEmbedding', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'generateEmbeddingBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('generateEmbedding', 'generateEmbeddingBodyParams', generateEmbeddingBodyParams);
            const localVarPath = `/embeddings/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateEmbeddingBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists the currently available embeddings models and provides basic information, such as the slug.
         * @summary List available embeddings models
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmbeddings: (xGradientWorkspaceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('listEmbeddings', 'xGradientWorkspaceId', xGradientWorkspaceId);
            const localVarPath = `/embeddings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.EmbeddingsApiAxiosParamCreator = EmbeddingsApiAxiosParamCreator;
/**
 * EmbeddingsApi - functional programming interface
 * @export
 */
const EmbeddingsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.EmbeddingsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Generates normalized embeddings with the given embeddings model.
         * @summary Generate embeddings
         * @param {GenerateEmbeddingSlugEnum} slug
         * @param {string} xGradientWorkspaceId
         * @param {GenerateEmbeddingBodyParams} generateEmbeddingBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateEmbedding(slug, xGradientWorkspaceId, generateEmbeddingBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.generateEmbedding(slug, xGradientWorkspaceId, generateEmbeddingBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Lists the currently available embeddings models and provides basic information, such as the slug.
         * @summary List available embeddings models
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmbeddings(xGradientWorkspaceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEmbeddings(xGradientWorkspaceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.EmbeddingsApiFp = EmbeddingsApiFp;
/**
 * EmbeddingsApi - factory interface
 * @export
 */
const EmbeddingsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.EmbeddingsApiFp)(configuration);
    return {
        /**
         * Generates normalized embeddings with the given embeddings model.
         * @summary Generate embeddings
         * @param {EmbeddingsApiGenerateEmbeddingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateEmbedding(requestParameters, options) {
            return localVarFp.generateEmbedding(requestParameters.slug, requestParameters.xGradientWorkspaceId, requestParameters.generateEmbeddingBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the currently available embeddings models and provides basic information, such as the slug.
         * @summary List available embeddings models
         * @param {EmbeddingsApiListEmbeddingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmbeddings(requestParameters, options) {
            return localVarFp.listEmbeddings(requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.EmbeddingsApiFactory = EmbeddingsApiFactory;
/**
 * EmbeddingsApi - object-oriented interface
 * @export
 * @class EmbeddingsApi
 * @extends {BaseAPI}
 */
class EmbeddingsApi extends base_1.BaseAPI {
    /**
     * Generates normalized embeddings with the given embeddings model.
     * @summary Generate embeddings
     * @param {EmbeddingsApiGenerateEmbeddingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddingsApi
     */
    generateEmbedding(requestParameters, options) {
        return (0, exports.EmbeddingsApiFp)(this.configuration).generateEmbedding(requestParameters.slug, requestParameters.xGradientWorkspaceId, requestParameters.generateEmbeddingBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the currently available embeddings models and provides basic information, such as the slug.
     * @summary List available embeddings models
     * @param {EmbeddingsApiListEmbeddingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddingsApi
     */
    listEmbeddings(requestParameters, options) {
        return (0, exports.EmbeddingsApiFp)(this.configuration).listEmbeddings(requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EmbeddingsApi = EmbeddingsApi;
/**
 * @export
 */
exports.GenerateEmbeddingSlugEnum = {
    BgeLarge: 'bge-large'
};
/**
 * FilesApi - axios parameter creator
 * @export
 */
const FilesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Stores uploaded file.
         * @summary File upload
         * @param {UploadFileTypeEnum} type
         * @param {string} xGradientWorkspaceId
         * @param {File} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: (type, xGradientWorkspaceId, file, options = {}) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('uploadFile', 'type', type);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('uploadFile', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'file' is not null or undefined
            (0, common_1.assertParamExists)('uploadFile', 'file', file);
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            if (file !== undefined) {
                if (typeof file === 'object' && file.type === 'file') {
                    localVarFormParams.append('file', file.contentStream, { knownLength: file.fileSize });
                }
                else {
                    localVarFormParams.append('file', file);
                }
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), (_b = (_a = localVarFormParams).getHeaders) === null || _b === void 0 ? void 0 : _b.call(_a)), (localVarFormParams.hasKnownLength() ? { 'Content-Length': localVarFormParams.getLengthSync() } : {})), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FilesApiAxiosParamCreator = FilesApiAxiosParamCreator;
/**
 * FilesApi - functional programming interface
 * @export
 */
const FilesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FilesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Stores uploaded file.
         * @summary File upload
         * @param {UploadFileTypeEnum} type
         * @param {string} xGradientWorkspaceId
         * @param {File} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(type, xGradientWorkspaceId, file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.uploadFile(type, xGradientWorkspaceId, file, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.FilesApiFp = FilesApiFp;
/**
 * FilesApi - factory interface
 * @export
 */
const FilesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FilesApiFp)(configuration);
    return {
        /**
         * Stores uploaded file.
         * @summary File upload
         * @param {FilesApiUploadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(requestParameters, options) {
            return localVarFp.uploadFile(requestParameters.type, requestParameters.xGradientWorkspaceId, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FilesApiFactory = FilesApiFactory;
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
class FilesApi extends base_1.BaseAPI {
    /**
     * Stores uploaded file.
     * @summary File upload
     * @param {FilesApiUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    uploadFile(requestParameters, options) {
        return (0, exports.FilesApiFp)(this.configuration).uploadFile(requestParameters.type, requestParameters.xGradientWorkspaceId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FilesApi = FilesApi;
/**
 * @export
 */
exports.UploadFileTypeEnum = {
    AudioFile: 'audioFile',
    RagUserFile: 'ragUserFile'
};
/**
 * ModelsApi - axios parameter creator
 * @export
 */
const ModelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Completes your fine-tuned model with the specified prompt string. The model will generate a completion.
         * @summary Complete model
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {CompleteModelBodyParams} completeModelBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeModel: (id, xGradientWorkspaceId, completeModelBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('completeModel', 'id', id);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('completeModel', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'completeModelBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('completeModel', 'completeModelBodyParams', completeModelBodyParams);
            const localVarPath = `/models/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(completeModelBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a new instance of a model based on a specified model from the existing list.
         * @summary Create model
         * @param {string} xGradientWorkspaceId
         * @param {CreateModelBodyParams} createModelBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel: (xGradientWorkspaceId, createModelBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('createModel', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'createModelBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('createModel', 'createModelBodyParams', createModelBodyParams);
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createModelBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes the fine-tuned model.
         * @summary Delete model
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: (id, xGradientWorkspaceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteModel', 'id', id);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('deleteModel', 'xGradientWorkspaceId', xGradientWorkspaceId);
            const localVarPath = `/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fine-tunes the specified model with your data samples.
         * @summary Fine-tune model
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {FineTuneModelBodyParams} fineTuneModelBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineTuneModel: (id, xGradientWorkspaceId, fineTuneModelBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('fineTuneModel', 'id', id);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('fineTuneModel', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'fineTuneModelBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('fineTuneModel', 'fineTuneModelBodyParams', fineTuneModelBodyParams);
            const localVarPath = `/models/{id}/fine-tune`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(fineTuneModelBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Describes the specified model, including the model ID, name, and base model ID.
         * @summary Describe model
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel: (id, xGradientWorkspaceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getModel', 'id', id);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('getModel', 'xGradientWorkspaceId', xGradientWorkspaceId);
            const localVarPath = `/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists the currently available models in the selected workspace and provides basic information, such as the model name, ID and whether it is a base or fine-tuned model.
         * @summary List available models
         * @param {string} xGradientWorkspaceId
         * @param {ListModelsCapabilityEnum} [capability]
         * @param {boolean | null} [onlyBase]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels: (xGradientWorkspaceId, capability, onlyBase, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('listModels', 'xGradientWorkspaceId', xGradientWorkspaceId);
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (capability !== undefined) {
                localVarQueryParameter['capability'] = capability;
            }
            if (onlyBase !== undefined) {
                localVarQueryParameter['onlyBase'] = onlyBase;
            }
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ModelsApiAxiosParamCreator = ModelsApiAxiosParamCreator;
/**
 * ModelsApi - functional programming interface
 * @export
 */
const ModelsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ModelsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Completes your fine-tuned model with the specified prompt string. The model will generate a completion.
         * @summary Complete model
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {CompleteModelBodyParams} completeModelBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeModel(id, xGradientWorkspaceId, completeModelBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.completeModel(id, xGradientWorkspaceId, completeModelBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates a new instance of a model based on a specified model from the existing list.
         * @summary Create model
         * @param {string} xGradientWorkspaceId
         * @param {CreateModelBodyParams} createModelBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(xGradientWorkspaceId, createModelBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModel(xGradientWorkspaceId, createModelBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes the fine-tuned model.
         * @summary Delete model
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(id, xGradientWorkspaceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModel(id, xGradientWorkspaceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Fine-tunes the specified model with your data samples.
         * @summary Fine-tune model
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {FineTuneModelBodyParams} fineTuneModelBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineTuneModel(id, xGradientWorkspaceId, fineTuneModelBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fineTuneModel(id, xGradientWorkspaceId, fineTuneModelBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Describes the specified model, including the model ID, name, and base model ID.
         * @summary Describe model
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(id, xGradientWorkspaceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getModel(id, xGradientWorkspaceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Lists the currently available models in the selected workspace and provides basic information, such as the model name, ID and whether it is a base or fine-tuned model.
         * @summary List available models
         * @param {string} xGradientWorkspaceId
         * @param {ListModelsCapabilityEnum} [capability]
         * @param {boolean | null} [onlyBase]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(xGradientWorkspaceId, capability, onlyBase, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModels(xGradientWorkspaceId, capability, onlyBase, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ModelsApiFp = ModelsApiFp;
/**
 * ModelsApi - factory interface
 * @export
 */
const ModelsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ModelsApiFp)(configuration);
    return {
        /**
         * Completes your fine-tuned model with the specified prompt string. The model will generate a completion.
         * @summary Complete model
         * @param {ModelsApiCompleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeModel(requestParameters, options) {
            return localVarFp.completeModel(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.completeModelBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new instance of a model based on a specified model from the existing list.
         * @summary Create model
         * @param {ModelsApiCreateModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(requestParameters, options) {
            return localVarFp.createModel(requestParameters.xGradientWorkspaceId, requestParameters.createModelBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the fine-tuned model.
         * @summary Delete model
         * @param {ModelsApiDeleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(requestParameters, options) {
            return localVarFp.deleteModel(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fine-tunes the specified model with your data samples.
         * @summary Fine-tune model
         * @param {ModelsApiFineTuneModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fineTuneModel(requestParameters, options) {
            return localVarFp.fineTuneModel(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.fineTuneModelBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Describes the specified model, including the model ID, name, and base model ID.
         * @summary Describe model
         * @param {ModelsApiGetModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(requestParameters, options) {
            return localVarFp.getModel(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the currently available models in the selected workspace and provides basic information, such as the model name, ID and whether it is a base or fine-tuned model.
         * @summary List available models
         * @param {ModelsApiListModelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(requestParameters, options) {
            return localVarFp.listModels(requestParameters.xGradientWorkspaceId, requestParameters.capability, requestParameters.onlyBase, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ModelsApiFactory = ModelsApiFactory;
/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
class ModelsApi extends base_1.BaseAPI {
    /**
     * Completes your fine-tuned model with the specified prompt string. The model will generate a completion.
     * @summary Complete model
     * @param {ModelsApiCompleteModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    completeModel(requestParameters, options) {
        return (0, exports.ModelsApiFp)(this.configuration).completeModel(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.completeModelBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new instance of a model based on a specified model from the existing list.
     * @summary Create model
     * @param {ModelsApiCreateModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    createModel(requestParameters, options) {
        return (0, exports.ModelsApiFp)(this.configuration).createModel(requestParameters.xGradientWorkspaceId, requestParameters.createModelBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the fine-tuned model.
     * @summary Delete model
     * @param {ModelsApiDeleteModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    deleteModel(requestParameters, options) {
        return (0, exports.ModelsApiFp)(this.configuration).deleteModel(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fine-tunes the specified model with your data samples.
     * @summary Fine-tune model
     * @param {ModelsApiFineTuneModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    fineTuneModel(requestParameters, options) {
        return (0, exports.ModelsApiFp)(this.configuration).fineTuneModel(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.fineTuneModelBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Describes the specified model, including the model ID, name, and base model ID.
     * @summary Describe model
     * @param {ModelsApiGetModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    getModel(requestParameters, options) {
        return (0, exports.ModelsApiFp)(this.configuration).getModel(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the currently available models in the selected workspace and provides basic information, such as the model name, ID and whether it is a base or fine-tuned model.
     * @summary List available models
     * @param {ModelsApiListModelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    listModels(requestParameters, options) {
        return (0, exports.ModelsApiFp)(this.configuration).listModels(requestParameters.xGradientWorkspaceId, requestParameters.capability, requestParameters.onlyBase, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ModelsApi = ModelsApi;
/**
 * @export
 */
exports.ListModelsCapabilityEnum = {
    Complete: 'complete',
    FineTune: 'fineTune',
    Any: 'any'
};
/**
 * RAGApi - axios parameter creator
 * @export
 */
const RAGApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds files to the RAG collection.
         * @summary Add files to RAG collection
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {AddFilesToRagCollectionBodyParams} addFilesToRagCollectionBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFilesToRagCollection: (id, xGradientWorkspaceId, addFilesToRagCollectionBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('addFilesToRagCollection', 'id', id);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('addFilesToRagCollection', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'addFilesToRagCollectionBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('addFilesToRagCollection', 'addFilesToRagCollectionBodyParams', addFilesToRagCollectionBodyParams);
            const localVarPath = `/rag-collections/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addFilesToRagCollectionBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a new collection of RAG documents.
         * @summary Create RAG collection
         * @param {string} xGradientWorkspaceId
         * @param {CreateRagCollectionBodyParams} createRagCollectionBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRagCollection: (xGradientWorkspaceId, createRagCollectionBodyParams, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('createRagCollection', 'xGradientWorkspaceId', xGradientWorkspaceId);
            // verify required parameter 'createRagCollectionBodyParams' is not null or undefined
            (0, common_1.assertParamExists)('createRagCollection', 'createRagCollectionBodyParams', createRagCollectionBodyParams);
            const localVarPath = `/rag-collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createRagCollectionBodyParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes the RAG collection.
         * @summary Delete RAG collection
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRagCollection: (id, xGradientWorkspaceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteRagCollection', 'id', id);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('deleteRagCollection', 'xGradientWorkspaceId', xGradientWorkspaceId);
            const localVarPath = `/rag-collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the RAG collection details.
         * @summary Get RAG collection
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRagCollection: (id, xGradientWorkspaceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getRagCollection', 'id', id);
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('getRagCollection', 'xGradientWorkspaceId', xGradientWorkspaceId);
            const localVarPath = `/rag-collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Lists all RAG collections associated with your workspace.
         * @summary List RAG collections
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRagCollections: (xGradientWorkspaceId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'xGradientWorkspaceId' is not null or undefined
            (0, common_1.assertParamExists)('listRagCollections', 'xGradientWorkspaceId', xGradientWorkspaceId);
            const localVarPath = `/rag-collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xGradientWorkspaceId != null) {
                localVarHeaderParameter['x-gradient-workspace-id'] = String(xGradientWorkspaceId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RAGApiAxiosParamCreator = RAGApiAxiosParamCreator;
/**
 * RAGApi - functional programming interface
 * @export
 */
const RAGApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RAGApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds files to the RAG collection.
         * @summary Add files to RAG collection
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {AddFilesToRagCollectionBodyParams} addFilesToRagCollectionBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFilesToRagCollection(id, xGradientWorkspaceId, addFilesToRagCollectionBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFilesToRagCollection(id, xGradientWorkspaceId, addFilesToRagCollectionBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates a new collection of RAG documents.
         * @summary Create RAG collection
         * @param {string} xGradientWorkspaceId
         * @param {CreateRagCollectionBodyParams} createRagCollectionBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRagCollection(xGradientWorkspaceId, createRagCollectionBodyParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRagCollection(xGradientWorkspaceId, createRagCollectionBodyParams, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes the RAG collection.
         * @summary Delete RAG collection
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRagCollection(id, xGradientWorkspaceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRagCollection(id, xGradientWorkspaceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets the RAG collection details.
         * @summary Get RAG collection
         * @param {string} id
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRagCollection(id, xGradientWorkspaceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRagCollection(id, xGradientWorkspaceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Lists all RAG collections associated with your workspace.
         * @summary List RAG collections
         * @param {string} xGradientWorkspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRagCollections(xGradientWorkspaceId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listRagCollections(xGradientWorkspaceId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.RAGApiFp = RAGApiFp;
/**
 * RAGApi - factory interface
 * @export
 */
const RAGApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RAGApiFp)(configuration);
    return {
        /**
         * Adds files to the RAG collection.
         * @summary Add files to RAG collection
         * @param {RAGApiAddFilesToRagCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFilesToRagCollection(requestParameters, options) {
            return localVarFp.addFilesToRagCollection(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.addFilesToRagCollectionBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new collection of RAG documents.
         * @summary Create RAG collection
         * @param {RAGApiCreateRagCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRagCollection(requestParameters, options) {
            return localVarFp.createRagCollection(requestParameters.xGradientWorkspaceId, requestParameters.createRagCollectionBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the RAG collection.
         * @summary Delete RAG collection
         * @param {RAGApiDeleteRagCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRagCollection(requestParameters, options) {
            return localVarFp.deleteRagCollection(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the RAG collection details.
         * @summary Get RAG collection
         * @param {RAGApiGetRagCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRagCollection(requestParameters, options) {
            return localVarFp.getRagCollection(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all RAG collections associated with your workspace.
         * @summary List RAG collections
         * @param {RAGApiListRagCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRagCollections(requestParameters, options) {
            return localVarFp.listRagCollections(requestParameters.xGradientWorkspaceId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RAGApiFactory = RAGApiFactory;
/**
 * RAGApi - object-oriented interface
 * @export
 * @class RAGApi
 * @extends {BaseAPI}
 */
class RAGApi extends base_1.BaseAPI {
    /**
     * Adds files to the RAG collection.
     * @summary Add files to RAG collection
     * @param {RAGApiAddFilesToRagCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RAGApi
     */
    addFilesToRagCollection(requestParameters, options) {
        return (0, exports.RAGApiFp)(this.configuration).addFilesToRagCollection(requestParameters.id, requestParameters.xGradientWorkspaceId, requestParameters.addFilesToRagCollectionBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new collection of RAG documents.
     * @summary Create RAG collection
     * @param {RAGApiCreateRagCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RAGApi
     */
    createRagCollection(requestParameters, options) {
        return (0, exports.RAGApiFp)(this.configuration).createRagCollection(requestParameters.xGradientWorkspaceId, requestParameters.createRagCollectionBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the RAG collection.
     * @summary Delete RAG collection
     * @param {RAGApiDeleteRagCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RAGApi
     */
    deleteRagCollection(requestParameters, options) {
        return (0, exports.RAGApiFp)(this.configuration).deleteRagCollection(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the RAG collection details.
     * @summary Get RAG collection
     * @param {RAGApiGetRagCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RAGApi
     */
    getRagCollection(requestParameters, options) {
        return (0, exports.RAGApiFp)(this.configuration).getRagCollection(requestParameters.id, requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all RAG collections associated with your workspace.
     * @summary List RAG collections
     * @param {RAGApiListRagCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RAGApi
     */
    listRagCollections(requestParameters, options) {
        return (0, exports.RAGApiFp)(this.configuration).listRagCollections(requestParameters.xGradientWorkspaceId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RAGApi = RAGApi;
